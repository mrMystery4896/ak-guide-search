// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  guides        Guide[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Operator {
  id     String  @id
  name   String
  rarity Int
  guides Guide[]
}

model Stage {
  stageCode String  @id
  guides    Guide[]
  event     Event   @relation(fields: [eventId], references: [id])
  eventId   String

  @@index([eventId])
}

model Tag {
  id     String  @id @default(cuid())
  name   String
  guides Guide[]
}

model Creator {
  id     String  @id
  name   String
  guides Guide[]
}

enum Status {
  APPROVED
  PENDING
  REJECTED
}

model Guide {
  id            String     @id
  title         String
  stage         Stage      @relation(fields: [stageCode], references: [stageCode])
  stageCode     String
  operators     Operator[]
  tags          Tag[]
  submittedBy   User       @relation(fields: [submittedById], references: [id])
  submittedById String
  status        Status
  submittedAt   DateTime
  uploadedBy    Creator    @relation(fields: [uploadedById], references: [id])
  uploadedById  String

  @@index([stageCode])
  @@index([submittedById])
  @@index([uploadedById])
}

model Event {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  description String
  stages      Stage[]
  imageUrl    String
}
